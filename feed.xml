<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rust-analyzer</title>
    <description>rust-analyzer: building a better Rust IDE</description>
    <link>https://rust-analyzer.github.io//</link>
    <atom:link href="https://rust-analyzer.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 13 Jul 2020 14:35:00 +0000</pubDate>
    <lastBuildDate>Mon, 13 Jul 2020 14:35:00 +0000</lastBuildDate>
    <generator>Jekyll v3.8.7</generator>
    
      <item>
        <title>Changelog #33</title>
        <pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/07/13/changelog-33.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/07/13/changelog-33.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/5ca7cd960b908944a2f3f66a1d0ee5df98b78959&quot;&gt;&lt;code&gt;5ca7cd9&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-07-13&quot;&gt;&lt;code&gt;2020-07-13&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sponsors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sponsors&quot;&gt;&lt;/a&gt;Sponsors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://ferrous-systems.com/&quot;&gt;Ferrous Systems&lt;/a&gt; is a Berlin based consultancy focused on the Rust Programming language.
Ferrous Systems offers advice, training, open source development, and proprietary development services for a wide variety of applications in Rust, including embedded systems, compiler/tooling components, and web/backend technologies.
This week, Ferrous Systems is running &lt;a href=&quot;https://oxidizeconf.com/&quot;&gt;Oxidize Global&lt;/a&gt;, an online conference for embedded systems in Rust!
Thanks to Ferrous Systems for supporting open source projects like rust-analyzer!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Become a sponsor:&lt;/strong&gt; &lt;a href=&quot;https://opencollective.com/rust-analyzer/&quot;&gt;opecollective.com/rust-analyzer&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5293&quot;&gt;&lt;code&gt;#5293&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5299&quot;&gt;&lt;code&gt;#5299&lt;/code&gt;&lt;/a&gt; automatically reload workspace on &lt;code&gt;Cargo.toml&lt;/code&gt; and similar changes.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/87297466-c4c6e200-c508-11ea-9fb0-519757220b5d.gif&quot; alt=&quot;87297466 c4c6e200 c508 11ea 9fb0 519757220b5d&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rust-analyzer is available via rustup:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rustup update nightly
info: syncing channel updates ...
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rustup component add &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--toolchain&lt;/span&gt; nightly rust-analyzer-preview
info: installing component ...
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rustup run nightly rust-analyzer &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
rust-analyzer 8b0983e
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the moment, the recommended way to install rust-analyzer is still via GitHub release.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4972&quot;&gt;&lt;code&gt;#4972&lt;/code&gt;&lt;/a&gt; gzip rust-analyzer releases.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5244&quot;&gt;&lt;code&gt;#5244&lt;/code&gt;&lt;/a&gt; add a command to compute memory usage statistics using Archimedes' method.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5270&quot;&gt;&lt;code&gt;#5270&lt;/code&gt;&lt;/a&gt; highlight error for calls with too few/too many arguments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5284&quot;&gt;&lt;code&gt;#5284&lt;/code&gt;&lt;/a&gt; add folding for record literals.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5292&quot;&gt;&lt;code&gt;#5292&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Goto Type Definition&lt;/strong&gt; works for &lt;code&gt;self&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5294&quot;&gt;&lt;code&gt;#5294&lt;/code&gt;&lt;/a&gt; complete function parameters in more cases&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/87296648-60efe980-c507-11ea-95d5-9b66623e2636.gif&quot; alt=&quot;87296648 60efe980 c507 11ea 95d5 9b66623e2636&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5314&quot;&gt;&lt;code&gt;#5314&lt;/code&gt;&lt;/a&gt; use &lt;code&gt;parameter&lt;/code&gt; semantic tag for function parameters.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5326&quot;&gt;&lt;code&gt;#5326&lt;/code&gt;&lt;/a&gt; add type inference support for unions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5319&quot;&gt;&lt;code&gt;#5319&lt;/code&gt;&lt;/a&gt; upgrade Chalk, fixing a number of type inference bugs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5285&quot;&gt;&lt;code&gt;#5285&lt;/code&gt;&lt;/a&gt; correctly determine cursor position when rewriting to a raw strings:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/87071611-bdf35300-c21a-11ea-93d6-c04f1b1a8ac1.gif&quot; alt=&quot;87071611 bdf35300 c21a 11ea 93d6 c04f1b1a8ac1&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5243&quot;&gt;&lt;code&gt;#5243&lt;/code&gt;&lt;/a&gt; consider EPERM error as other vscode processes using rust-analyzer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5252&quot;&gt;&lt;code&gt;#5252&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5255&quot;&gt;&lt;code&gt;#5255&lt;/code&gt;&lt;/a&gt; fix a bug where workspace symbols in workspace would skip symbols
from top-level crate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5280&quot;&gt;&lt;code&gt;#5280&lt;/code&gt;&lt;/a&gt; re-enable completion for incomplete impl blocks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5288&quot;&gt;&lt;code&gt;#5288&lt;/code&gt;&lt;/a&gt; avoid accidentally overwriting config values.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5286&quot;&gt;&lt;code&gt;#5286&lt;/code&gt;&lt;/a&gt; cap the maximal number of syntax errors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4996&quot;&gt;&lt;code&gt;#4996&lt;/code&gt;&lt;/a&gt; correctly generate new struct field in file containing struct def.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5311&quot;&gt;&lt;code&gt;#5311&lt;/code&gt;&lt;/a&gt; fix goto definition for type alias type parameters.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5324&quot;&gt;&lt;code&gt;#5324&lt;/code&gt;&lt;/a&gt; show implementation code lens for unions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5328&quot;&gt;&lt;code&gt;#5328&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Change Visibility&lt;/strong&gt; assist works on statics.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5330&quot;&gt;&lt;code&gt;#5330&lt;/code&gt;&lt;/a&gt; fix &lt;code&gt;ignore&lt;/code&gt; attribute autocompletion.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5303&quot;&gt;&lt;code&gt;#5303&lt;/code&gt;&lt;/a&gt; speed up code completion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5307&quot;&gt;&lt;code&gt;#5307&lt;/code&gt;&lt;/a&gt; document how to profile code completion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5242&quot;&gt;&lt;code&gt;#5242&lt;/code&gt;&lt;/a&gt; upgrade salsa to 0.15.0 which significantly improves rust-analyzer&amp;#8217;s.
compile times, by avoiding repeated monomorphisations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5245&quot;&gt;&lt;code&gt;#5245&lt;/code&gt;&lt;/a&gt; prepare &lt;code&gt;AssistBuilder&lt;/code&gt; for assists which create new files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5247&quot;&gt;&lt;code&gt;#5247&lt;/code&gt;&lt;/a&gt; modernize completion tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5312&quot;&gt;&lt;code&gt;#5312&lt;/code&gt;&lt;/a&gt; make a slow test parallel.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #32</title>
        <pubDate>Mon, 06 Jul 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/07/06/changelog-32.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/07/06/changelog-32.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/8b0983e89ad9a28b142eccf3755a8c9aaeb37852&quot;&gt;&lt;code&gt;8b0983e&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-07-06&quot;&gt;&lt;code&gt;2020-07-06&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sponsors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sponsors&quot;&gt;&lt;/a&gt;Sponsors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This week we&amp;#8217;d like to thank one of our individual sponsors, &lt;a href=&quot;https://github.com/anp&quot;&gt;@anp&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;@anp maintains &lt;a href=&quot;https://moxie.rs&quot;&gt;moxie&lt;/a&gt; project: a lightweight platform-agnostic declarative UI runtime, because incremental feedback latency and quality are core to building interactive software.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Become a sponsor:&lt;/strong&gt; &lt;a href=&quot;https://opencollective.com/rust-analyzer/&quot;&gt;opecollective.com/rust-analyzer&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5169&quot;&gt;&lt;code&gt;#5169&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5188&quot;&gt;&lt;code&gt;#5188&lt;/code&gt;&lt;/a&gt; initial support for dynamic workspace reloading.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/86605844-8335b480-bfa7-11ea-964f-72e06f535607.gif&quot; alt=&quot;86605844 8335b480 bfa7 11ea 964f 72e06f535607&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5119&quot;&gt;&lt;code&gt;#5119&lt;/code&gt;&lt;/a&gt; show notification while SSR is in progress.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5120&quot;&gt;&lt;code&gt;#5120&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5154&quot;&gt;&lt;code&gt;#5154&lt;/code&gt;&lt;/a&gt; add a simple SSR subcommand to the rust-analyzer command line binary:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;rust-analyzer ssr '$a.foo($b) ==&amp;gt; bar($a, $b)'&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5161&quot;&gt;&lt;code&gt;#5161&lt;/code&gt;&lt;/a&gt; add initial support for placeholder constraints in structural search replace.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5142&quot;&gt;&lt;code&gt;#5142&lt;/code&gt;&lt;/a&gt; allow parallel type inference in batch mode (&lt;code&gt;rust-analyzer analysis-stats&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5178&quot;&gt;&lt;code&gt;#5178&lt;/code&gt;&lt;/a&gt; emit folding ranges for multiline calls.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5149&quot;&gt;&lt;code&gt;#5149&lt;/code&gt;&lt;/a&gt; implement Chalk variable kinds, which improves type inference for primitives.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5116&quot;&gt;&lt;code&gt;#5116&lt;/code&gt;&lt;/a&gt; set categories for code actions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5192&quot;&gt;&lt;code&gt;#5192&lt;/code&gt;&lt;/a&gt; take &lt;code&gt;rust-analyzer.cargo.features&lt;/code&gt; into account when generating run configurations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5202&quot;&gt;&lt;code&gt;#5202&lt;/code&gt;&lt;/a&gt; allow to set default environment for run configurations (&lt;a href=&quot;https://rust-analyzer.github.io/manual.html#setting-runnable-environment-variables&quot;&gt;docs&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;jsonc&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nl&quot;&gt;&quot;rust-analyzer.runnableEnv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// null mask means that this rule will be applied for all runnables&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// &quot;mask&quot;: null,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;APP_ID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;APP_DATA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;asdf&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;mask&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;env&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;APP_ID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// overwrites only APP_ID&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4864&quot;&gt;&lt;code&gt;#4864&lt;/code&gt;&lt;/a&gt; Add optional target to crates in json project&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5122&quot;&gt;&lt;code&gt;#5122&lt;/code&gt;&lt;/a&gt; fix &quot;Run | Debug&quot; lens for examples.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5124&quot;&gt;&lt;code&gt;#5124&lt;/code&gt;&lt;/a&gt; partially fix handling of type params depending on type params.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5211&quot;&gt;&lt;code&gt;#5211&lt;/code&gt;&lt;/a&gt; partially fix inference of indexing argument.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5096&quot;&gt;&lt;code&gt;#5096&lt;/code&gt;&lt;/a&gt; fix handling of whitespace when applying SSR within macro expansions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5110&quot;&gt;&lt;code&gt;#5110&lt;/code&gt;&lt;/a&gt; fix call hierarchy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5179&quot;&gt;&lt;code&gt;#5179&lt;/code&gt;&lt;/a&gt; lower fields despite invalid type.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5089&quot;&gt;&lt;code&gt;#5089&lt;/code&gt;&lt;/a&gt; disable auto-complete on comments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5189&quot;&gt;&lt;code&gt;#5189&lt;/code&gt;&lt;/a&gt; record and suggest assoc. items of traits via ImportMap.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5212&quot;&gt;&lt;code&gt;#5212&lt;/code&gt;&lt;/a&gt; fix renaming of nested out of line modules &lt;code&gt;mod outer { mod inner; }&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5136&quot;&gt;&lt;code&gt;#5136&lt;/code&gt;&lt;/a&gt; split namespace maps in &lt;code&gt;ItemScope&lt;/code&gt;, reducing memory usage of the CrateDefMap query by ~130 MB (50%) on r-a.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5175&quot;&gt;&lt;code&gt;#5175&lt;/code&gt;&lt;/a&gt; more memory-efficient impl collection.
This saves roughly 90 MB in &lt;code&gt;ImplsFromDepsQuery&lt;/code&gt;, which used to copy the list of all impls from libcore into &lt;strong&gt;every&lt;/strong&gt; crate in the graph.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5127&quot;&gt;&lt;code&gt;#5127&lt;/code&gt;&lt;/a&gt; improve test infra for type inference test.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5126&quot;&gt;&lt;code&gt;#5126&lt;/code&gt;&lt;/a&gt; use &lt;code&gt;FxHash{Map,Set}&lt;/code&gt; consistently.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5101&quot;&gt;&lt;code&gt;#5101&lt;/code&gt;&lt;/a&gt; add expect&amp;#8201;&amp;#8212;&amp;#8201;a lighter-weight alternative to the &lt;code&gt;insta&lt;/code&gt; snapshot testing library.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5137&quot;&gt;&lt;code&gt;#5137&lt;/code&gt;&lt;/a&gt; make gotodef tests more data-driven.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5138&quot;&gt;&lt;code&gt;#5138&lt;/code&gt;&lt;/a&gt; refactor runnable tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5146&quot;&gt;&lt;code&gt;#5146&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5151&quot;&gt;&lt;code&gt;#5151&lt;/code&gt;&lt;/a&gt; simplify inlay hints tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5153&quot;&gt;&lt;code&gt;#5153&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5156&quot;&gt;&lt;code&gt;#5156&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5157&quot;&gt;&lt;code&gt;#5157&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5162&quot;&gt;&lt;code&gt;#5162&lt;/code&gt;&lt;/a&gt; remove some generics from &lt;code&gt;ra_hir&lt;/code&gt; interface.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5158&quot;&gt;&lt;code&gt;#5158&lt;/code&gt;&lt;/a&gt; correctly distinguish between semantical and display crate names.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5160&quot;&gt;&lt;code&gt;#5160&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5167&quot;&gt;&lt;code&gt;#5167&lt;/code&gt;&lt;/a&gt; reuse caches in more cases.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5176&quot;&gt;&lt;code&gt;#5176&lt;/code&gt;&lt;/a&gt; update expand macro tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5193&quot;&gt;&lt;code&gt;#5193&lt;/code&gt;&lt;/a&gt; move &lt;code&gt;cargo metadata&lt;/code&gt; off the main loop.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5199&quot;&gt;&lt;code&gt;#5199&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5200&quot;&gt;&lt;code&gt;#5200&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5201&quot;&gt;&lt;code&gt;#5201&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5205&quot;&gt;&lt;code&gt;#5205&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5214&quot;&gt;&lt;code&gt;#5214&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5215&quot;&gt;&lt;code&gt;#5215&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5219&quot;&gt;&lt;code&gt;#5219&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5221&quot;&gt;&lt;code&gt;#5221&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5226&quot;&gt;&lt;code&gt;#5226&lt;/code&gt;&lt;/a&gt; refactor completion tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5197&quot;&gt;&lt;code&gt;#5197&lt;/code&gt;&lt;/a&gt; SSR internal refactors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5222&quot;&gt;&lt;code&gt;#5222&lt;/code&gt;&lt;/a&gt; add &quot;rehighlight after adding a new top-level function&quot; to the set of bechmarks.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #31</title>
        <pubDate>Mon, 29 Jun 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/06/29/changelog-31.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/06/29/changelog-31.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/ca31b1d63ae91a69f1ce9c0b075403834ba19f38&quot;&gt;&lt;code&gt;ca31b1d&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-06-29&quot;&gt;&lt;code&gt;2020-06-29&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sponsors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sponsors&quot;&gt;&lt;/a&gt;Sponsors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This week, we&amp;#8217;d like to thank another long-time sponsor:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.parity.io/&quot;&gt;Parity&lt;/a&gt; is building tooling and infrastructure for the decentralised, trustless Web in Rust.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4990&quot;&gt;&lt;code&gt;#4990&lt;/code&gt;&lt;/a&gt; introduce an &lt;code&gt;ItemTree&lt;/code&gt; layer to avoid reparsing files.
This reduces the latency of &quot;go to definition&quot; in a simple benchmark on rust-analyzer by around 30%.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5017&quot;&gt;&lt;code&gt;#5017&lt;/code&gt;&lt;/a&gt; add custom cargo runners support. This adds an option to delegate actual cargo commands building to another extension.
For example, to use a different manager like &lt;a href=&quot;https://github.com/rust-embedded/cross&quot;&gt;cross&lt;/a&gt;.
&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=vsrs.cross-rust-analyzer&quot;&gt;cross-rust-analyzer&lt;/a&gt; is an example of such extension.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5069&quot;&gt;&lt;code&gt;#5069&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Extract Variable&lt;/strong&gt; understands field init shorthand&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/86007529-d2b03980-ba17-11ea-998f-0e44f659041f.gif&quot; alt=&quot;86007529 d2b03980 ba17 11ea 998f 0e44f659041f&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4999&quot;&gt;&lt;code&gt;#4999&lt;/code&gt;&lt;/a&gt; allow matching of whole macro calls in structural search replace.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5007&quot;&gt;&lt;code&gt;#5007&lt;/code&gt;&lt;/a&gt; allow matching within macro calls in structural search replace.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4997&quot;&gt;&lt;code&gt;#4997&lt;/code&gt;&lt;/a&gt; document GNOME Builder (Nightly) support for rust-analyzer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4940&quot;&gt;&lt;code&gt;#4940&lt;/code&gt;&lt;/a&gt; set &lt;code&gt;injected&lt;/code&gt; modifier for code in doctests.
Theme authors can use it to dim injected code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5047&quot;&gt;&lt;code&gt;#5047&lt;/code&gt;&lt;/a&gt; matching brace works for | in lambdas&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/86006971-122a5600-ba17-11ea-8be7-f60b0a97eead.gif&quot; alt=&quot;86006971 122a5600 ba17 11ea 8be7 f60b0a97eead&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5066&quot;&gt;&lt;code&gt;#5066&lt;/code&gt;&lt;/a&gt; infer type for slice wildcard patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4587&quot;&gt;&lt;code&gt;#4587&lt;/code&gt;&lt;/a&gt; missing unsafe diagnostics.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5100&quot;&gt;&lt;code&gt;#5100&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5102&quot;&gt;&lt;code&gt;#5102&lt;/code&gt;&lt;/a&gt;: Add support for &lt;code&gt;include_str&lt;/code&gt; and &lt;code&gt;include_bytes&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4900&quot;&gt;&lt;code&gt;#4900&lt;/code&gt;&lt;/a&gt; fix name resolution for &lt;code&gt;Self&lt;/code&gt; in enums.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4988&quot;&gt;&lt;code&gt;#4988&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t offer to add missing fields of unknown types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4992&quot;&gt;&lt;code&gt;#4992&lt;/code&gt;&lt;/a&gt; never disable error logging on the frontend.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5002&quot;&gt;&lt;code&gt;#5002&lt;/code&gt;&lt;/a&gt; fix underflow panic when doctests are at top of file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5004&quot;&gt;&lt;code&gt;#5004&lt;/code&gt;&lt;/a&gt; fix panic in split/merge import assists.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5023&quot;&gt;&lt;code&gt;#5023&lt;/code&gt;&lt;/a&gt; fix string literal inference in match.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5015&quot;&gt;&lt;code&gt;#5015&lt;/code&gt;&lt;/a&gt; account for updated module ids when determining whether a resolution is changed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5033&quot;&gt;&lt;code&gt;#5033&lt;/code&gt;&lt;/a&gt; order of glob imports does not affect import shadowing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4976&quot;&gt;&lt;code&gt;#4976&lt;/code&gt;&lt;/a&gt; new VFS.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5068&quot;&gt;&lt;code&gt;#5068&lt;/code&gt;&lt;/a&gt; prepare for dynamic project reloading.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rewrite main loop in rust-analyzer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4982&quot;&gt;&lt;code&gt;#4982&lt;/code&gt;&lt;/a&gt; upgrade chalk. This, and other type system improvements, bring the proportion of of unknown types in rust-analzyer to less than 1%.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4983&quot;&gt;&lt;code&gt;#4983&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5010&quot;&gt;&lt;code&gt;#5010&lt;/code&gt;&lt;/a&gt; add &lt;code&gt;paths::RelPath[Buf]&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5013&quot;&gt;&lt;code&gt;#5013&lt;/code&gt;&lt;/a&gt; uniformly trim test data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5014&quot;&gt;&lt;code&gt;#5014&lt;/code&gt;&lt;/a&gt; centralize test data parsing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5029&quot;&gt;&lt;code&gt;#5029&lt;/code&gt;&lt;/a&gt; use &lt;code&gt;paths::AbsPath&lt;/code&gt; in more places.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5034&quot;&gt;&lt;code&gt;#5034&lt;/code&gt;&lt;/a&gt; cleanup project.json deserialization.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5048&quot;&gt;&lt;code&gt;#5048&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5056&quot;&gt;&lt;code&gt;#5056&lt;/code&gt;&lt;/a&gt; Canonicalize actor API.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #30</title>
        <pubDate>Mon, 22 Jun 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/06/22/changelog-30.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/06/22/changelog-30.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/3370c81525c89c4f3229180f83520de29b7ee8a0&quot;&gt;&lt;code&gt;3370c81&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-06-22&quot;&gt;&lt;code&gt;2020-06-22&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sponsors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sponsors&quot;&gt;&lt;/a&gt;Sponsors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This week, we&amp;#8217;d like to thank another long-time sponsor:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://discord.com&quot;&gt;Discord&lt;/a&gt;, a place to talk with your communities and friends, built using &lt;a href=&quot;https://discord.gg/rust-lang&quot;&gt;Rust&lt;/a&gt; and other best-in-class tools.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4839&quot;&gt;&lt;code&gt;#4839&lt;/code&gt;&lt;/a&gt; implement goto type definition for inlay hints&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/62505555/83335671-0122e380-a2b7-11ea-9922-fbdcfb11a7f3.gif&quot; alt=&quot;83335671 0122e380 a2b7 11ea 9922 fbdcfb11a7f3&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4851&quot;&gt;&lt;code&gt;#4851&lt;/code&gt;&lt;/a&gt; add quickfix to add a struct field&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/85289481-d253f380-b497-11ea-8089-2f21e3fdb75e.gif&quot; alt=&quot;85289481 d253f380 b497 11ea 8089 2f21e3fdb75e&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4860&quot;&gt;&lt;code&gt;#4860&lt;/code&gt;&lt;/a&gt; accept relative paths in rust-project.json.
If a relative path is found as part of Crate.root_module or Root.path, interpret it as relative to the location of the rust-project.json file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4878&quot;&gt;&lt;code&gt;#4878&lt;/code&gt;&lt;/a&gt; make &lt;strong&gt;Replace Qualified Name With Use&lt;/strong&gt; replace &lt;strong&gt;all&lt;/strong&gt; mentions of the path.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4919&quot;&gt;&lt;code&gt;#4919&lt;/code&gt;&lt;/a&gt; Structural Search Replace no longer requires to specify the type of the capture.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4916&quot;&gt;&lt;code&gt;#4916&lt;/code&gt;&lt;/a&gt; add configuration options to treat certain &lt;code&gt;cargo check&lt;/code&gt; warnings with hint or information severity.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;rust-analyzer.diagnostics.warningsAsHint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unused_variables&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4925&quot;&gt;&lt;code&gt;#4925&lt;/code&gt;&lt;/a&gt; highlighting escape sequences in strings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4903&quot;&gt;&lt;code&gt;#4903&lt;/code&gt;&lt;/a&gt; add &lt;code&gt;documentation&lt;/code&gt; to the list of semantic tokens modifiers for code inside doc comments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4963&quot;&gt;&lt;code&gt;#4963&lt;/code&gt;&lt;/a&gt; download artifacts into tmp dir.
This should prevent partially downloaded files in cases when the user closes vsode before the download is complete.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4969&quot;&gt;&lt;code&gt;#4969&lt;/code&gt;&lt;/a&gt; handle bindings after @ in patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4877&quot;&gt;&lt;code&gt;#4877&lt;/code&gt;&lt;/a&gt; fix syntax highlighting of recursive macros.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4876&quot;&gt;&lt;code&gt;#4876&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t highlight unresolved references in doc comments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4915&quot;&gt;&lt;code&gt;#4915&lt;/code&gt;&lt;/a&gt; only highlight rust code in doc comments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4959&quot;&gt;&lt;code&gt;#4959&lt;/code&gt;&lt;/a&gt; syntax highlighting for documentation comments on macro definitions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4914&quot;&gt;&lt;code&gt;#4914&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4930&quot;&gt;&lt;code&gt;#4930&lt;/code&gt;&lt;/a&gt; fix panic in match checking.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4821&quot;&gt;&lt;code&gt;#4821&lt;/code&gt;&lt;/a&gt; display doctest code lens before comment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4950&quot;&gt;&lt;code&gt;#4950&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4952&quot;&gt;&lt;code&gt;#4952&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4957&quot;&gt;&lt;code&gt;#4957&lt;/code&gt;&lt;/a&gt; fix panics in type inference.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4958&quot;&gt;&lt;code&gt;#4958&lt;/code&gt;&lt;/a&gt; fix type inference for Fn traits.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4891&quot;&gt;&lt;code&gt;#4891&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4948&quot;&gt;&lt;code&gt;#4948&lt;/code&gt;&lt;/a&gt; add API for the new Virtual File System.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4947&quot;&gt;&lt;code&gt;#4947&lt;/code&gt;&lt;/a&gt; improve type checking to use up to 20% less memory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4934&quot;&gt;&lt;code&gt;#4934&lt;/code&gt;&lt;/a&gt; directly leverage salsa queries for computing symbol index.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4937&quot;&gt;&lt;code&gt;#4937&lt;/code&gt;&lt;/a&gt; allow overriding rust-analyzer display version.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4961&quot;&gt;&lt;code&gt;#4961&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4964&quot;&gt;&lt;code&gt;#4964&lt;/code&gt;&lt;/a&gt; centralize in-flight LSP requests handling.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4962&quot;&gt;&lt;code&gt;#4962&lt;/code&gt;&lt;/a&gt; expand parsing API to allow more node types for SSR.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #29</title>
        <pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/06/15/changelog-29.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/06/15/changelog-29.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/017331a53c1eeaa1253d2829165627bfa27dc124&quot;&gt;&lt;code&gt;017331a&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-06-15&quot;&gt;&lt;code&gt;2020-06-15&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sponsors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sponsors&quot;&gt;&lt;/a&gt;Sponsors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This week, we&amp;#8217;d like to give a shoutout to one of our oldest sponsors:
&lt;a href=&quot;https://embark-studios.com/&quot;&gt;Embark Studios&lt;/a&gt;, a Stockholm-based game studio building a platform for the future of gamemaking and striving to support a thriving open-source ecosystem for game development in Rust.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4683&quot;&gt;&lt;code&gt;#4683&lt;/code&gt;&lt;/a&gt; initial version of semantic syntax highlighting for code inside doc comments.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/201808/83415249-1f0b5800-a41f-11ea-8fa6-c282434d6ff7.png&quot; alt=&quot;83415249 1f0b5800 a41f 11ea 8fa6 c282434d6ff7&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4576&quot;&gt;&lt;code&gt;#4576&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Extract Enum Variant to Struct&lt;/strong&gt; refactoring.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/84659254-6f9ead00-af17-11ea-84ab-bea16f160ecf.gif&quot; alt=&quot;84659254 6f9ead00 af17 11ea 84ab bea16f160ecf&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4822&quot;&gt;&lt;code&gt;#4822&lt;/code&gt;&lt;/a&gt; &lt;code&gt;checkOnSave&lt;/code&gt; cargo flags by default are inherited from cargo flags.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4700&quot;&gt;&lt;code&gt;#4700&lt;/code&gt;&lt;/a&gt; add top level keywords completion.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4775&quot;&gt;&lt;code&gt;#4775&lt;/code&gt;&lt;/a&gt; goto definition work correctly for fields of enum variants.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4784&quot;&gt;&lt;code&gt;#4784&lt;/code&gt;&lt;/a&gt; correctly handle &lt;code&gt;cfg&lt;/code&gt;s from &lt;code&gt;rust-project.json&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4803&quot;&gt;&lt;code&gt;#4803&lt;/code&gt;&lt;/a&gt; parse default unsafe fn.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4811&quot;&gt;&lt;code&gt;#4811&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Unwrap Block&lt;/strong&gt; works with match arms.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4815&quot;&gt;&lt;code&gt;#4815&lt;/code&gt;&lt;/a&gt; correctly parse &amp;lt;_&amp;gt; paths in patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4834&quot;&gt;&lt;code&gt;#4834&lt;/code&gt;&lt;/a&gt; in field patterns, don&amp;#8217;t highlight local binding as a field.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4850&quot;&gt;&lt;code&gt;#4850&lt;/code&gt;&lt;/a&gt; indent chain &lt;code&gt;.&lt;/code&gt; even if there&amp;#8217;s more stuff afterwards.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4849&quot;&gt;&lt;code&gt;#4849&lt;/code&gt;&lt;/a&gt; make known paths use &lt;code&gt;core&lt;/code&gt; instead of &lt;code&gt;std&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4833&quot;&gt;&lt;code&gt;#4833&lt;/code&gt;&lt;/a&gt; separating parsing of &lt;code&gt;for&lt;/code&gt; in predicates and types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4858&quot;&gt;&lt;code&gt;#4858&lt;/code&gt;&lt;/a&gt; prefer shorter paths for external items in auto import.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4857&quot;&gt;&lt;code&gt;#4857&lt;/code&gt;&lt;/a&gt; fix invalid shorthand initialization diagnostic for tuple structs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4862&quot;&gt;&lt;code&gt;#4862&lt;/code&gt;&lt;/a&gt; re-enable &quot;Warning&quot; diagnostic severity for unused variables.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4805&quot;&gt;&lt;code&gt;#4805&lt;/code&gt;&lt;/a&gt; finish JsonProject transition to cfgs from the separate atoms and features.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4810&quot;&gt;&lt;code&gt;#4810&lt;/code&gt;&lt;/a&gt; simplify unwrapping of blocks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4832&quot;&gt;&lt;code&gt;#4832&lt;/code&gt;&lt;/a&gt; reduce &lt;code&gt;OUT_DIR&lt;/code&gt; special casing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4819&quot;&gt;&lt;code&gt;#4819&lt;/code&gt;&lt;/a&gt; auto import go brrr (add an FST index to &lt;code&gt;ImportMap&lt;/code&gt; and use it to speed up auto import).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4843&quot;&gt;&lt;code&gt;#4843&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t guess macro expansion crate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4875&quot;&gt;&lt;code&gt;#4875&lt;/code&gt;&lt;/a&gt; introduce paths crate to track absolutness of path in the type system.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #28</title>
        <pubDate>Mon, 08 Jun 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/06/08/changelog-28.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/06/08/changelog-28.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/d6967762dd1fff3cfb65d481ba5a169143205c0e&quot;&gt;&lt;code&gt;d696776&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-06-08&quot;&gt;&lt;code&gt;2020-06-08&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4711&quot;&gt;&lt;code&gt;#4711&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t pass &lt;code&gt;--all-features&lt;/code&gt; by default, use Cargo&amp;#8217;s default features instead.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4720&quot;&gt;&lt;code&gt;#4720&lt;/code&gt;&lt;/a&gt; highlight unsafe operations inside unsafe blocks. In VS Code, you can use &lt;code&gt;editor.semanticTokenColorCustomizations&lt;/code&gt; to customize the actual coloring&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nl&quot;&gt;&quot;editor.semanticTokenColorCustomizations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;[Theme Name]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;rules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;operator.unsafe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#f00&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;function.unsafe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#f00&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/84034187-48d1fb00-a99a-11ea-960b-e6b3f73e7db1.png&quot; alt=&quot;84034187 48d1fb00 a99a 11ea 960b e6b3f73e7db1&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4382&quot;&gt;&lt;code&gt;#4382&lt;/code&gt;&lt;/a&gt; allow specifying key-value cfg options in JsonProject.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4726&quot;&gt;&lt;code&gt;#4726&lt;/code&gt;&lt;/a&gt; allow to override build-in project discovery with explicit list of `Cargo.toml`s to import:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;rust-analyzer.linkedProjects&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/home/projects/rust-analyzer/Cargo.toml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4730&quot;&gt;&lt;code&gt;#4730&lt;/code&gt;&lt;/a&gt; document &lt;code&gt;rust-project.json&lt;/code&gt; file format, which can be used with non-Cargo based build systems.
Docs: &lt;a href=&quot;https://rust-analyzer.github.io/manual.html#non-cargo-based-projects&quot;&gt;#non-cargo-based-projects&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4660&quot;&gt;&lt;code&gt;#4660&lt;/code&gt;&lt;/a&gt; enable hover and autocomplete docs on macro generated items.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4748&quot;&gt;&lt;code&gt;#4748&lt;/code&gt;&lt;/a&gt; implement hover actions, as an alternative UI for code lenses.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/84036613-b6cbf180-a99d-11ea-81e3-f3ecd9142937.gif&quot; alt=&quot;84036613 b6cbf180 a99d 11ea 81e3 f3ecd9142937&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4689&quot;&gt;&lt;code&gt;#4689&lt;/code&gt;&lt;/a&gt; implement return position impl trait.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4750&quot;&gt;&lt;code&gt;#4750&lt;/code&gt;&lt;/a&gt; fix &lt;strong&gt;Introduce Named Lifetime&lt;/strong&gt; assist to work in more cases.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/84036167-22fa2580-a99d-11ea-8fec-493520297c3d.gif&quot; alt=&quot;84036167 22fa2580 a99d 11ea 8fec 493520297c3d&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4580&quot;&gt;&lt;code&gt;#4580&lt;/code&gt;&lt;/a&gt; invoke correct cargo for &lt;code&gt;run&lt;/code&gt; action in VS Code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4658&quot;&gt;&lt;code&gt;#4658&lt;/code&gt;&lt;/a&gt; fix lexing of format strings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4721&quot;&gt;&lt;code&gt;#4721&lt;/code&gt;&lt;/a&gt; use correct modifier for unused code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4502&quot;&gt;&lt;code&gt;#4502&lt;/code&gt;&lt;/a&gt; mark fixes from diagnostics as quick fixes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4737&quot;&gt;&lt;code&gt;#4737&lt;/code&gt;&lt;/a&gt; parse default unsafe &amp;amp; default const.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4765&quot;&gt;&lt;code&gt;#4765&lt;/code&gt;&lt;/a&gt; fix type parameter defaults.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4761&quot;&gt;&lt;code&gt;#4761&lt;/code&gt;&lt;/a&gt; use Chalk from crates.io.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4748&quot;&gt;&lt;code&gt;#4748&lt;/code&gt;&lt;/a&gt; build specialized index to improve auto-import performance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4717&quot;&gt;&lt;code&gt;#4717&lt;/code&gt;&lt;/a&gt; compute assists text edits lazily.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4703&quot;&gt;&lt;code&gt;#4703&lt;/code&gt;&lt;/a&gt; document review process and contribution guidelines.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4772&quot;&gt;&lt;code&gt;#4772&lt;/code&gt;&lt;/a&gt; document certain high-level internal architecture invariants.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4688&quot;&gt;&lt;code&gt;#4688&lt;/code&gt;&lt;/a&gt; document initilizationOptions used by rust-analyzer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4710&quot;&gt;&lt;code&gt;#4710&lt;/code&gt;&lt;/a&gt; make LSP extension for running tests &amp;amp; binaries less rust-specific.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4723&quot;&gt;&lt;code&gt;#4723&lt;/code&gt;&lt;/a&gt; derive local roots from workspace configuration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4724&quot;&gt;&lt;code&gt;#4724&lt;/code&gt;&lt;/a&gt; rename WorldState &amp;#8594; GlobalState.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4758&quot;&gt;&lt;code&gt;#4758&lt;/code&gt;&lt;/a&gt; actually test &lt;code&gt;include!(concant!(env!()))&lt;/code&gt; pattern.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4760&quot;&gt;&lt;code&gt;#4760&lt;/code&gt;&lt;/a&gt; preliminary refactorings in preparation for new VFS.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #27</title>
        <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/06/01/changelog-27.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/06/01/changelog-27.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/7ae247f03c639d6e704159df7f0120466afc3c30&quot;&gt;&lt;code&gt;7ae247f&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-06-01&quot;&gt;&lt;code&gt;2020-06-01&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4646&quot;&gt;&lt;code&gt;#4646&lt;/code&gt;&lt;/a&gt; users.rust-lang.org now includes a dedicated category for IDE-related questions: &lt;a href=&quot;https://users.rust-lang.org/c/ide/14&quot;&gt;IDEs and editors&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4664&quot;&gt;&lt;code&gt;#4664&lt;/code&gt;&lt;/a&gt; add most of the features of rust-analyzer to the manual.
Each feature includes a link to the source code which implements the feature.
If something does not work exactly as you want it to, you know what to do ;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4602&quot;&gt;&lt;code&gt;#4602&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4603&quot;&gt;&lt;code&gt;#4603&lt;/code&gt;&lt;/a&gt; add semantic token types for boolean literals and self keyword.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4621&quot;&gt;&lt;code&gt;#4621&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4654&quot;&gt;&lt;code&gt;#4654&lt;/code&gt;&lt;/a&gt; highlighting for &lt;code&gt;?&lt;/code&gt; operator.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4534&quot;&gt;&lt;code&gt;#4534&lt;/code&gt;&lt;/a&gt; &lt;code&gt;.call&lt;/code&gt; postfix completion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4640&quot;&gt;&lt;code&gt;#4640&lt;/code&gt;&lt;/a&gt; add &lt;code&gt;inRustProject&lt;/code&gt; when-clause for commands in vscode.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4648&quot;&gt;&lt;code&gt;#4648&lt;/code&gt;&lt;/a&gt; support the nightly raw reference operator.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4562&quot;&gt;&lt;code&gt;#4562&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Introduce Named Lifetime&lt;/strong&gt; assist.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4612&quot;&gt;&lt;code&gt;#4612&lt;/code&gt;&lt;/a&gt; correctly tag releases.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4617&quot;&gt;&lt;code&gt;#4617&lt;/code&gt;&lt;/a&gt; fix rendering of hover.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4629&quot;&gt;&lt;code&gt;#4629&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t display inlay hints in diff view in VS Code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4596&quot;&gt;&lt;code&gt;#4596&lt;/code&gt;&lt;/a&gt; when completing parameter names, don&amp;#8217;t include leading underscore.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4592&quot;&gt;&lt;code&gt;#4592&lt;/code&gt;&lt;/a&gt; correctly compute text edit during completion if the partially-typed identifier is a keyword.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4651&quot;&gt;&lt;code&gt;#4651&lt;/code&gt;&lt;/a&gt; to improve completion, prefer first type in &lt;code&gt;if else&lt;/code&gt; if there&amp;#8217;s a type mismatch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4653&quot;&gt;&lt;code&gt;#4653&lt;/code&gt;&lt;/a&gt; fix match ergonomics in closure parameters.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4667&quot;&gt;&lt;code&gt;#4667&lt;/code&gt;&lt;/a&gt; infer labelled breaks correctly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4669&quot;&gt;&lt;code&gt;#4669&lt;/code&gt;&lt;/a&gt; in VS Code plugin always derive from &lt;code&gt;process.env&lt;/code&gt; when spawning a child process/shell execution.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4674&quot;&gt;&lt;code&gt;#4674&lt;/code&gt;&lt;/a&gt; recursively search submodules to find modules in which a definition is visible.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4605&quot;&gt;&lt;code&gt;#4605&lt;/code&gt;&lt;/a&gt; flatten TypeScript module hierarchy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4607&quot;&gt;&lt;code&gt;#4607&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4611&quot;&gt;&lt;code&gt;#4611&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4632&quot;&gt;&lt;code&gt;#4632&lt;/code&gt;&lt;/a&gt; document more LSP extensions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4641&quot;&gt;&lt;code&gt;#4641&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4652&quot;&gt;&lt;code&gt;#4652&lt;/code&gt;&lt;/a&gt; upgrade Chalk.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #26</title>
        <pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/05/25/changelog-26.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/05/25/changelog-26.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/fbb8b884a2dbc3ced720c84f4604466e223f6d69&quot;&gt;&lt;code&gt;fbb8b88&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-05-25&quot;&gt;&lt;code&gt;2020-05-25&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the effort to improve support for all editors, and to speedup acceptance of rust-analyzer extensions to the Language Server Protocol, all extensions are now documented:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/blob/1527feb744c7911b6ca482554f0399d3ef0ebfdc/docs/dev/lsp-extensions.md&quot;&gt;&lt;code&gt;lsp-extensions.md&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you maintain rust-analyzer plugin for some editor, consider implementing these extensions and giving feedback for the corresponding upstream issue at &lt;a href=&quot;https://github.com/Microsoft/language-server-protocol/&quot;&gt;Microsoft/language-server-protocol&lt;/a&gt;.
Additionally, consider subscribing to &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/issues/4604&quot;&gt;#4604&lt;/a&gt;, which will announce all future extensions and changes.
Note that we don&amp;#8217;t have any compatibility guarantees yet&amp;#8201;&amp;#8212;&amp;#8201;all our extensions are subject to change on a short notice.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sponsors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sponsors&quot;&gt;&lt;/a&gt;Sponsors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting this week, we&amp;#8217;ll be mentioning our significant Open Collective backers of &quot;Sponsor&quot; level or higher in the changelogs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This week, we welcome a new sponsor: &lt;a href=&quot;https://www.prisma.io/&quot;&gt;Prisma&lt;/a&gt;, a modern database toolkit for Node.js and TypeScript built with Rust under the hood.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4518&quot;&gt;&lt;code&gt;#4518&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Add TurboFish&lt;/strong&gt; assist&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/82789805-3cfb1a80-9e6b-11ea-9100-a14d722d2620.gif&quot; alt=&quot;82789805 3cfb1a80 9e6b 11ea 9100 a14d722d2620&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4464&quot;&gt;&lt;code&gt;#4464&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Run&lt;/strong&gt; action passes &lt;code&gt;--feature&lt;/code&gt; flags to cargo based on the required &lt;code&gt;cfg&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4555&quot;&gt;&lt;code&gt;#4555&lt;/code&gt;&lt;/a&gt; on NixOS, automatically &lt;code&gt;patchelf&lt;/code&gt; downloaded rust-analyzer binary.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4474&quot;&gt;&lt;code&gt;#4474&lt;/code&gt;&lt;/a&gt; highlight attributes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4556&quot;&gt;&lt;code&gt;#4556&lt;/code&gt;&lt;/a&gt; dedicated highlighting for &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4491&quot;&gt;&lt;code&gt;#4491&lt;/code&gt;&lt;/a&gt; run doctest feature works on item inside impls.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4505&quot;&gt;&lt;code&gt;#4505&lt;/code&gt;&lt;/a&gt; infer return type of loops with value breaks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4528&quot;&gt;&lt;code&gt;#4528&lt;/code&gt;&lt;/a&gt; fix debug lens fix for binary targets.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4526&quot;&gt;&lt;code&gt;#4526&lt;/code&gt;&lt;/a&gt; take tree at fixing ▶ symbol.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4559&quot;&gt;&lt;code&gt;#4559&lt;/code&gt;&lt;/a&gt; add blank line after module path in hover text.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4538&quot;&gt;&lt;code&gt;#4538&lt;/code&gt;&lt;/a&gt; add tests for VS Code extension.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4494&quot;&gt;&lt;code&gt;#4494&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4519&quot;&gt;&lt;code&gt;#4519&lt;/code&gt;&lt;/a&gt; change implementation of code actions to use snippets.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4543&quot;&gt;&lt;code&gt;#4543&lt;/code&gt;&lt;/a&gt; remove old infrastructure for cursor placement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4552&quot;&gt;&lt;code&gt;#4552&lt;/code&gt;&lt;/a&gt; use snippets for &lt;code&gt;onEnter&lt;/code&gt; handling.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4569&quot;&gt;&lt;code&gt;#4569&lt;/code&gt;&lt;/a&gt; change implementation of code action groups to make it upstreamable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4501&quot;&gt;&lt;code&gt;#4501&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4506&quot;&gt;&lt;code&gt;#4506&lt;/code&gt;&lt;/a&gt; improve performance of auto-import.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4520&quot;&gt;&lt;code&gt;#4520&lt;/code&gt;&lt;/a&gt; better test marks infrastructure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4532&quot;&gt;&lt;code&gt;#4532&lt;/code&gt;&lt;/a&gt; split change_visibility and fix_visibility assists.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4516&quot;&gt;&lt;code&gt;#4516&lt;/code&gt;&lt;/a&gt; use two-stage LSP initialization, to better account for capabilities.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4571&quot;&gt;&lt;code&gt;#4571&lt;/code&gt;&lt;/a&gt; remove &lt;code&gt;label&lt;/code&gt; from &lt;code&gt;SourceChange&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4570&quot;&gt;&lt;code&gt;#4570&lt;/code&gt;&lt;/a&gt; leverage Chalk&amp;#8217;s impls for built-ins.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4573&quot;&gt;&lt;code&gt;#4573&lt;/code&gt;&lt;/a&gt; cleanup Chalk integration code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4575&quot;&gt;&lt;code&gt;#4575&lt;/code&gt;&lt;/a&gt; leverage Chalk&amp;#8217;s impls for functions items and pointers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4590&quot;&gt;&lt;code&gt;#4590&lt;/code&gt;&lt;/a&gt; upgrade &lt;code&gt;rustc_lexer&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4495&quot;&gt;&lt;code&gt;#4495&lt;/code&gt;&lt;/a&gt; improve parsing of test fixtures.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #25</title>
        <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/05/18/changelog-25.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/05/18/changelog-25.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/31611da2538e66027ea67482235f6b8659bedf09&quot;&gt;&lt;code&gt;31611da&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-05-18&quot;&gt;&lt;code&gt;2020-05-18&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4397&quot;&gt;&lt;code&gt;#4397&lt;/code&gt;&lt;/a&gt; implement a basic TextMate grammar which plays better with our semantic highlighting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4358&quot;&gt;&lt;code&gt;#4358&lt;/code&gt;&lt;/a&gt; &lt;code&gt;ifl&lt;/code&gt; postfix template for &lt;code&gt;Result&lt;/code&gt; and &lt;code&gt;Option&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/82217445-b7331880-991a-11ea-8e9a-698e3dc07106.gif&quot; alt=&quot;82217445 b7331880 991a 11ea 8e9a 698e3dc07106&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4423&quot;&gt;&lt;code&gt;#4423&lt;/code&gt;&lt;/a&gt; &lt;code&gt;tmod&lt;/code&gt; item-level snippet.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/82217447-b8644580-991a-11ea-87e1-a8c61d21583f.gif&quot; alt=&quot;82217447 b8644580 991a 11ea 87e1 a8c61d21583f&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4273&quot;&gt;&lt;code&gt;#4273&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Add Visibility&lt;/strong&gt; assist now works on paths, adding a visibility to an item in other module:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/82217439-b39f9180-991a-11ea-92e9-f162c41debc6.gif&quot; alt=&quot;82217439 b39f9180 991a 11ea 92e9 f162c41debc6&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4448&quot;&gt;&lt;code&gt;#4448&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Generate Launch Configuration&lt;/strong&gt; command to save debug configurations for specific tests:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/82217442-b601eb80-991a-11ea-99dd-b0c2bba786c8.gif&quot; alt=&quot;82217442 b601eb80 991a 11ea 99dd b0c2bba786c8&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4436&quot;&gt;&lt;code&gt;#4436&lt;/code&gt;&lt;/a&gt; use &lt;code&gt;.rust&lt;/code&gt; sufix on TextMate scopes introduced by rust-analyzer for easier theming.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4427&quot;&gt;&lt;code&gt;#4427&lt;/code&gt;&lt;/a&gt; use Ubuntu 16.04 to build releases, to get older glibc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4400&quot;&gt;&lt;code&gt;#4400&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4473&quot;&gt;&lt;code&gt;#4473&lt;/code&gt;&lt;/a&gt; improve syntax higlighting, underline mutable bindings in all themes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4455&quot;&gt;&lt;code&gt;#4455&lt;/code&gt;&lt;/a&gt; in completion, prioritise locals with correct types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4288&quot;&gt;&lt;code&gt;#4288&lt;/code&gt;&lt;/a&gt; initial implementation of renaming of &lt;code&gt;self&lt;/code&gt; parameter, for switching between associated function and a method.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4479&quot;&gt;&lt;code&gt;#4479&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4484&quot;&gt;&lt;code&gt;#4484&lt;/code&gt;&lt;/a&gt; support for &lt;code&gt;dyn Trait&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4489&quot;&gt;&lt;code&gt;#4489&lt;/code&gt;&lt;/a&gt; reduce allocations, improving performance for batch analysis for up to 4%.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4496&quot;&gt;&lt;code&gt;#4496&lt;/code&gt;&lt;/a&gt; we now support two latest versions of VS Code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4421&quot;&gt;&lt;code&gt;#4421&lt;/code&gt;&lt;/a&gt; fix visibility handling in find references.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4403&quot;&gt;&lt;code&gt;#4403&lt;/code&gt;&lt;/a&gt; check client capabilities before sending progres notifications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4447&quot;&gt;&lt;code&gt;#4447&lt;/code&gt;&lt;/a&gt; make sure that play arrow in &lt;code&gt;Run&lt;/code&gt; lens is not emoji-ifyied.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4431&quot;&gt;&lt;code&gt;#4431&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t garbage-collect results of procedural macro expansion, to combat non-deterministic proc macros.
Please avoid randomized hash maps when writing procedural macros :-)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4470&quot;&gt;&lt;code&gt;#4470&lt;/code&gt;&lt;/a&gt; handle &lt;code&gt;Self&lt;/code&gt; in values and patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4472&quot;&gt;&lt;code&gt;#4472&lt;/code&gt;&lt;/a&gt; fix path resolution for module and function with same name.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4424&quot;&gt;&lt;code&gt;#4424&lt;/code&gt;&lt;/a&gt; use &lt;code&gt;RA_LOG&lt;/code&gt; variable to enable rust-analyzer&amp;#8217;s logging, so as not to conflict with usual &lt;code&gt;RUST_LOG&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4083&quot;&gt;&lt;code&gt;#4083&lt;/code&gt;&lt;/a&gt; document rust-analyzer&amp;#8217;s AST.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4405&quot;&gt;&lt;code&gt;#4405&lt;/code&gt;&lt;/a&gt; make some internal types public so that rust-analyzer is easier to use as a library.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Next Few Years</title>
        <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//blog/2020/05/18/next-few-years.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//blog/2020/05/18/next-few-years.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;rust-analyzer is a new &quot;IDE backend&quot; for the &lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;Rust&lt;/a&gt; programming language.
Support rust-analyzer on &lt;a href=&quot;https://opencollective.com/rust-analyzer/&quot;&gt;Open Collective&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During the past several months, I&amp;#8217;ve been swamped with in-the-trenches rust-analyzer work.
Today, I spontaneously decided to take a step back and think about longer-term &quot;road map&quot; for rust-analyzer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What follows is my (&lt;a href=&quot;https://github.com/matklad/&quot;&gt;@matklad&lt;/a&gt;) personal thoughts on the matter, they not necessary reflect the consensus view of ide or compiler teams :-)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;unexpected-success&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#unexpected-success&quot;&gt;&lt;/a&gt;Unexpected Success&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the most surprising aspects of rust-analyzer for me is how useful it already is.
Today, I write Rust code enjoying fast code-completion, mostly correct go to definition and plethora of assists.
Even syntax highlighting inside macros works!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My original plan for rust-analyzer was to write a quick one-to-two-year hack to demonstrate a proof-of-concept IDE support, something to strive for rather than a finished product.
Obviously, we have massively overshot this goal: people depend on rust-analyzer for productive Rust programming today.
This creates its own opportunities and dangers, which inform this planning document.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;official-lsp-server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#official-lsp-server&quot;&gt;&lt;/a&gt;Official LSP Server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;People write a ton of Rust today, and they deserve at least a baseline level of IDE support.
I think our immediate goal is to make rust-analyzer easier to use in its current state, effectively implementing &lt;a href=&quot;https://github.com/rust-lang/rfcs/pull/2912&quot;&gt;RFC2912&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The amount of programming work on rust-analyzer side is relatively small here:
we need to fix various protocol conformance issues,
clean up various defaults to be less experimental,
write documentation which doesn&amp;#8217;t require a lot of enthusiasm to understand, etc.
The amount of org stuff is much bigger&amp;#8201;&amp;#8212;&amp;#8201;we need to package rust-analyzer with rustup, merge the RLS and rust-analyzer VS Code extensions, figure out repository structure, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Separately, I want to make sure that rust-analyzer is usable inside large non-Cargo based monorepos.
We have some initial support for this already, but there&amp;#8217;s a bunch of details we need to iron out.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;dangers-of-accidental-architecture&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dangers-of-accidental-architecture&quot;&gt;&lt;/a&gt;Dangers of Accidental Architecture&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main danger I see is that rust-analyzer can ossify in its present state.
This would be bad, because, although current rust-analyzer architecture is right in broad strokes, a lot of important and hard-to-change details are wrong.
After we push rust-analyzer to the general public, we should focus on boring implementation &amp;amp; design work, with relatively few shiny gifs and a lot of foundational work for the next decade.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;bringing-chalk-to-rustc&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#bringing-chalk-to-rustc&quot;&gt;&lt;/a&gt;Bringing Chalk to Rustc&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;rust-analyzer has been using chalk as its trait solver for a long time now.
It would be good to finish the work, and integrate it into rustc as well, &lt;span class=&quot;line-through&quot;&gt;and give people their GATs&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;single-parser-and-syntax-tree&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#single-parser-and-syntax-tree&quot;&gt;&lt;/a&gt;Single Parser and Syntax Tree&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We should share the parser between rustc and rust-analyzer already.
Parsing is one of the most interesting bits of the compiler, from the IDE point of view.
By transitioning rustc to a lossless syntax we&amp;#8217;ll cross the most important barrier, and it will be a downhill road from that point on.
The design space here I think is well-understood, but the amount of work to do is large.
At some point, I should take a break from actively hacking on rust-analyzer and focus on sharing the parser.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;virtual-file-system&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#virtual-file-system&quot;&gt;&lt;/a&gt;Virtual File System&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The most fundamental data structure in rust-analyzer, even more fundamental than a syntax tree, is the VFS, or Virtual File System.
It serves two dual goals:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;providing consistent immutable snapshots of the file system,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;applying transactional changes to the state of the file system.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This abstraction is the boundary between the pure-functional universe of rust-analyzer, and the messiness of the external world.
It needs to bridge case-insensitive file systems, symlinks and cycles to a simpler model of &quot;tree with utf8 paths&quot; we want inside.
Additionally it should work with non-path files: there are use-cases where we want to do analysis of Rust code, which doesn&amp;#8217;t really reside on the file system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One specific aspect I am struggling with is dynamism.
On the one hand, it seems that a good design is to require to specify the set of files in VFS upfront, as a set of globs.
This is important because, to properly register file watchers without losing updates, you need to crawl the file-system eagerly.
However, specifying a set of globs up-front makes changing this set later messy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I would be curious to hear about existing solutions in this area.
One specific question I have is: &quot;How does watchman handle dynamic addition/removal of projects?&quot;.
If you have any experience to share, please comment on the VFS issue in rust-analyzer.
Ideally, we turn VFS into just a crates.io crate, as it seems generally useful, and can encapsulate quite a bit of complexity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The current VFS is &amp;#8230;&amp;#8203; not great, I don&amp;#8217;t feel comfortable building rust-analyzer on top of it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;wasm-proc-macros&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#wasm-proc-macros&quot;&gt;&lt;/a&gt;WASM proc macros&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the moment, proc-macros are implemented as dynamic libraries, loadable into the compiler process.
This works ok-enough for the compiler, but is a pretty bad fit for an IDE:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;if a proc-macro crashes, it brings down the whole process,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;it&amp;#8217;s hard to limit execution time of proc-macro,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;proc-macros can be non-deterministic, which breaks internal IDE invariants.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the moment, we paper over this by running proc-macros in a separate process and never invalidating proc-macro caches, but this feels like a hack and has high implementation complexity.
it would be much better if proc-macros were deterministic and controllable by definition, and WASM can give us that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am slightly worried that this will get push-back from folks who want to connect to databases over TCP at compile time :)
Long term, I believe that guaranteeing deterministic compilation is hugely important, irrespective of IDE story.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;language-design-for-locality&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#language-design-for-locality&quot;&gt;&lt;/a&gt;Language Design for Locality&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s a very important language property that an IDE can leverage to massively improve performance:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;What happens inside a function, stays inside the function&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If it is possible to type-check the body of a function without looking at the bodies of other functions, you can speed up an IDE by drastically reducing the amount of work it needs to do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust mostly conforms to this property, but there are a couple of annoying violations:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;local inherent impls with publicly visible methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;local trait impls for non-local types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;#[macro_export]&lt;/code&gt; local macros.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;local out-of-line modules.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we want to have fast &amp;amp; correct IDE support, we should phase out those from the language via edition mechanism.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that auto-trait leakage of impl Trait is not nearly as problematic, as you only need to inspect a function&amp;#8217;s body if you call the function.
Of course, as an IDE author I&amp;#8217;d love to require specifying auto-traits, but, as a language user, I much prefer the current design.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;compact-data-structures&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#compact-data-structures&quot;&gt;&lt;/a&gt;Compact Data Structures&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;rust-analyzer uses a novel and rather high-tech query-based architecture for incremental computation.
Today, it is clear that this general approach fits an IDE use-case really well.
However, I have a lot of doubts about specific details.
I feel that today rust-analyzer lacks mechanical sympathy and leaves a ton of performance on the table.
A lot of internal data structures are heap-allocated &lt;code&gt;Arc&lt;/code&gt;-droplets, we overuse hashing and underuse indexing, we don&amp;#8217;t even intern identifiers!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To get a feeling of how blazingly fast compiler front-ends can be, I highly recommend checking out Sorbet, type checker for Ruby.
You can start with these two links:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.nelhage.com/post/why-sorbet-is-fast/&quot; class=&quot;bare&quot;&gt;https://blog.nelhage.com/post/why-sorbet-is-fast/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Gdx6by6tcvw&quot; class=&quot;bare&quot;&gt;https://www.youtube.com/watch?v=Gdx6by6tcvw&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am very inspired by this work, but also embarrassed by how far rust-analyzer is from that kind of raw performance and simplicity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Part of that I think is essential complexity&amp;#8201;&amp;#8212;&amp;#8201;Rust&amp;#8217;s name resolution and macro expansion are &lt;strong&gt;hard&lt;/strong&gt;.
But I also wonder if we can change salsa to use &lt;code&gt;Vec&lt;/code&gt;-based arenas, rather than &lt;code&gt;Arc&lt;/code&gt;s in &lt;code&gt;HashMap&lt;/code&gt;s.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;parallel-and-fast-persistence&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#parallel-and-fast-persistence&quot;&gt;&lt;/a&gt;Parallel and Fast &amp;gt; Persistence&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the current peculiarities of rust-analyzer is that it doesn&amp;#8217;t persist caches to disk.
Opening project in rust-analyzer means waiting a dozen seconds while we process standard library and dependencies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I think this &quot;limitation&quot; is actually a very valuable asset!
It forces us to keep the non-incremental code-path reasonably fast.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I think it is plausible that we don&amp;#8217;t actually need persistent caches at all.
rust-analyzer is basically text processing, and the size of input is in tens of megabytes (&lt;em&gt;and&lt;/em&gt; we ignore most of those megabytes anyway).
If we just don&amp;#8217;t lose performance here and there, and throw the work onto all the cores, we should be able to load projects from scratch within a reasonable time budget.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first step here would be establishing the culture of continuous benchmarking and performance tuning.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve already successfully used rust-analyzer for forging an architecture which works in IDE at all.
Now it&amp;#8217;s time to experiment with architecture which works, &lt;em&gt;fast&lt;/em&gt;, just as all Rust code should :-)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;optimizing-build-times&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#optimizing-build-times&quot;&gt;&lt;/a&gt;Optimizing Build Times&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In my opinion the two important characteristics that determine long-term success of a project are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How long does it take to execute most of the tests?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How long does it take to build a release version of the project for testing?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am very happy with the testing speed of rust-analyzer.
One of my mistakes in IntelliJ was adding a lot of tests that use Rust&amp;#8217;s standard library and are slow for that reason.
In rust-analyzer, there are only three uber-integrated tests that need the real libstd, all others work from in-memory fixtures which contain only the relevant bits of std.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But the build times leave a lot to be desired.
And this is hugely important&amp;#8201;&amp;#8212;&amp;#8201;the faster you can build the code, the faster you can do everything else.
Heck, even for improving build times you need fast build times!
I was trying to do some compile-time optimizations in rust-analyzer recently, and measuring &amp;#8220;is it faster to compile now?&amp;#8221; takes a lot of time, so one has to try fewer different optimizations!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The biggest problem here is that Rust, as a language, is hard to compile fast.
One specific issue I hit constantly is that changing a deep dependency recompiles the world.
This is in contrast to C/C++ where, if you don&amp;#8217;t touch any &lt;code&gt;.h&lt;/code&gt; files, changing a dependency requires only re-linking.
In theory, we can have something like this in Rust, by automatically deriving public headers from crates.
Though I fear that without explicit, physical &amp;#8220;this is ABI&amp;#8221; boundary, it will be much less effective at keeping compile times under control.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As an aside, if Rust stuck with &lt;code&gt;.crate&lt;/code&gt; files, implementing IDE support would have been much easier :-)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;optimizing-rustc-build&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#optimizing-rustc-build&quot;&gt;&lt;/a&gt;Optimizing rustc Build&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nonetheless, rust-analyzer is much easier to build than rustc.
I believe there&amp;#8217;s a lot we can do for rustc build as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve written at length about this on &lt;a href=&quot;https://internals.rust-lang.org/t/experience-report-contributing-to-rust-lang-rust/12012/17?u=matklad&quot;&gt;irlo&lt;/a&gt;.
The gist is that I think we can split rustc into a front-end &quot;text-processing&quot; part, and backend &quot;LLVM, linkers and real world&quot; part.
The front bit then could, in theory, be a bog standard Rust project, which doesn&amp;#8217;t depend on IO, external tools or C++ code at all.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One wrinkle here is that rustc test suite at the moment consists predominantly of UI and run-pass tests integration, which work by building the whole compiler.
Such a test suite is ideal for testing conformance and catching regressions, but is not really well suited for rapid TDD.
I think we should make an effort to build a unit test suite a-la rust-analyzer, such that it&amp;#8217;s easy, for example, to test name resolution without building the type checker, and which doesn&amp;#8217;t require stdlib.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;scaling-maintainance&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#scaling-maintainance&quot;&gt;&lt;/a&gt;Scaling Maintainance&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, all changes here represent deep cuts into an existing body of software.
Pushing such ambitious projects to completion require people, who can dedicate significant amounts of their time and energy.
To put it bluntly, we need more dedicated folks working on the IDE tooling as a full time, paid job.
I am grateful to my colleagues at &lt;a href=&quot;https://ferrous-systems.com/&quot;&gt;Ferrous Systems&lt;/a&gt; who put a lot of energy into making this a reality.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you find rust-analyzer useful and use it professionally, please consider asking your company to sponsor rust-analyzer via our &lt;a href=&quot;https://opencollective.com/rust-analyzer/&quot;&gt;Open Collective&lt;/a&gt;.
Sponsorships from individuals are also accepted (and greatly appreciated!).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
  </channel>
</rss>
